<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Haoyubuhaoyu.github.io</id>
    <title>Gridea</title>
    <updated>2023-12-10T07:17:55.399Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Haoyubuhaoyu.github.io"/>
    <link rel="self" href="https://Haoyubuhaoyu.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Haoyubuhaoyu.github.io/images/avatar.png</logo>
    <icon>https://Haoyubuhaoyu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Verilog协议翻译（后仿真篇）]]></title>
        <id>https://Haoyubuhaoyu.github.io/post/verilog-xie-yi-fan-yi-hou-fang-zhen-pian/</id>
        <link href="https://Haoyubuhaoyu.github.io/post/verilog-xie-yi-fan-yi-hou-fang-zhen-pian/">
        </link>
        <updated>2023-12-08T14:22:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="16使用标准延迟格式sdf的反向注释">16.使用标准延迟格式(SDF)的反向注释</h1>
<p>SDF文件包含指定路径延迟的定时值、参数值、定时检查约束和互连延迟。除了仿真计时之外，SDF文件还可以包含其他信息，但这些信息不需要涉及Verilog仿真。SDF文件中的时序值通常来自应用专用集成电路(ASIC)延迟计算工具，这些工具利用了连接性、技术和布局几何信息。</p>
<p>Verilog backannotation是SDF文件更新的定时值指定路径延迟、参数值、定时约束值和互连延迟的过程。</p>
<h2 id="161-sdf注释器sdf-annotator">16.1 SDF注释器（SDF annotator）</h2>
<p>SDF annotator 是指能够将SDF数据反向注释到Verilog模拟器的任何工具。对于无法注释的数据，应报告警告。<br>
SDF文件可以包含许多与指定路径延迟、参数值、定时检查约束值或互连延迟无关的结构。一个例子是SDF文件的TIMINGENV部分中的任何结构。所有与Verilog计时无关的构造都将被忽略而不发出任何警告<br>
任何SDF文件未提供值的Verilog定时值，在反向注释过程中不得修改，其预反向注释值应保持不变。</p>
<h2 id="162-sdf构造到verilog的映射">16.2 SDF构造到Verilog的映射</h2>
<p>SDF计时值出现在CELL声明中，该声明可以包含DELAY、TIMINGCHECK和LABEL部分中的一个或多个。DELAY部分包含用于指定路径和互连延迟的传播延迟值。TIMINGCHECK部分包含定时检查约束值。标签（LABEL）部分包含 specparams 的新值。通过将SDF结构与相应的Verilog声明相匹配，然后将现有的Verilog计时值替换为SDF文件中的计时值，从而完成对Verilog的反向注释。</p>
<h3 id="1621-sdf延迟构造到verilog声明的映射">16.2.1 SDF延迟构造到Verilog声明的映射</h3>
<p>当注释不是互连延迟的DELAY构造时(在16.2.3中介绍)，SDF注释器查找名称和条件匹配的指定路径。在注释TIMINGCHECK构造时，SDF注释器查找名称和条件匹配的相同类型的计时检查。表16-1显示了哪些Verilog结构可以被DELAY部分中的每个SDF构造注释。<br>
<img src="https://Haoyubuhaoyu.github.io/post-images/1702046129395.png" alt="" loading="lazy"><br>
本例中，源SDF信号sel与源Verilog信号匹配，目的SDF信号zout也与目的Verilog信号匹配。因此，将1.3和1.7的上升/下降次数标注到指定路径上。<br>
SDF文件</p>
<pre><code class="language-verilog">(IOPATH sel zout (1.3) (1.7))
</code></pre>
<p>Verilog指定路径:</p>
<pre><code>(sel =&gt; zout) = 0;
</code></pre>
<p>两个端口之间有条件的IOPATH延迟只能向Verilog标注具有相同条件的两个端口之间的路径。在下面的例子中，1.3和1.7的上升/下降时间只被注释到第二个指定路径<br>
SDF文件</p>
<pre><code class="language-verilog">(COND mode (IOPATH sel zout (1.3) (1.7)))
</code></pre>
<p>Verilog指定路径:</p>
<pre><code>if (!mode) (sel =&gt; zout) = 0;
if (mode) (sel =&gt; zout) = 0;
</code></pre>
<p>两个端口之间的非条件IOPATH延迟应向所有Verilog注释相同两个端口之间的指定路径。在下面的例子中，1.3和1.7的上升/下降时间都被标注为指定路径:<br>
SDF文件</p>
<pre><code class="language-verilog">(IOPATH sel zout (1.3) (1.7)
</code></pre>
<p>Verilog指定路径:</p>
<pre><code>if (!mode) (sel =&gt; zout) = 0;
if (mode) (sel =&gt; zout) = 0;
</code></pre>
<h2 id="1622-sdf定时检查构造到verilog的映射">16.2.2 SDF定时检查构造到Verilog的映射</h2>
<p>表16-2显示了每种类型的SDF定时检查所注释的Verilog定时检查。V1是定时检查的第一个值，v2是第二个值，x表示没有注释值。</p>
<p><img src="https://Haoyubuhaoyu.github.io/post-images/1702046528871.png" alt="" loading="lazy"><br>
定时检查的参考信号和数据信号可以有逻辑条件表达式和与之相关联的边。任何信号上没有条件或边缘的SDF定时检查应与所有相应的Verilog定时检查相匹配，而不管是否存在条件。在以下示例中，SDF定时检查应注释到所有Verilog定时检查:</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Haoyubuhaoyu.github.io/post/hello-gridea/</id>
        <link href="https://Haoyubuhaoyu.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>